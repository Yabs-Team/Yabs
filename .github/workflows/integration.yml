name: Integration

on:
  schedule:
  - cron: "0 0 * * *"
  push: 
    branches:
      - test-for-283

jobs:
  cc:
    if: github.event_name == "schedule"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Checkout develop
      run: git checkout develop
    - uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - name: Install packages
      run: |
        cd frontend
        yarn install
    - name: Run unit tests
      run: |
        cd frontend
        yarn test:unit
    - name: Generate formatted coverage for codeclimate
      run: |
        echo Fetch testreporter tool
        cd frontend
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x cc-test-reporter
        ./cc-test-reporter format-coverage -t lcov
    - name: Upload coverage report to codeclimate
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      run: |
        echo Upload report to codeclimate
        cd frontend
        ./cc-test-reporter upload-coverage
  e2e:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Checkout develop
      run: git checkout develop
    - name: Build frontend
      run: |
        cd frontend
        yarn install
        yarn build --silent
    - uses: actions/cache@v1
      id: cache
      with:
        path: ~/local/rubies
        key: ${{ runner.os }}-ruby-2.6.3
    - uses: clupprich/ruby-build-action@master
      id: ruby
      with:
        ruby-version: 2.6.3
        cache-available: ${{ steps.cache.outputs.cache-hit == 'true' }}
    - uses: actions/cache@v1
      with:
        path: backend/vendor/bundle
        key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gem-
    - name: Bundle install
      run: |
        cd backend
        gem install bundler:2.0.2
        sudo apt-get -yqq install libsqlite3-dev
        bundle install --jobs=4 --retry=3 --path vendor/bundle
    - name: Load database from schema
      run: |
        cd backend
        bundle exec bin/rails db:schema:load
    - name: Load fixtures to database
      run: |
        cd backend
        bundle exec bin/rails db:fixtures:load
    - name: Run rails backend
      env:
        RAILS_ENV: test
      run: |
        cd backend
        bundle exec bin/rails s &
    - name: Run e2e tests
      run: |
        cd frontend
        yarn cypress run -e env=test
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots
    - uses: actions/upload-artifact@v1
      if: always()
      with:
        name: cypress-videos
        path: frontend/cypress/videos
